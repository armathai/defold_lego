require('lego.lego')
local Utils = require('lego.utils')

local function on_test1_update(self, new_value, old_value, uuid)
    print('test1 update: ' .. new_value .. ' => ' .. old_value .. ' uuid: ' .. uuid)
end

local function on_test2_update(self, new_value, old_value, uuid)
    print('test2 update: ' .. new_value .. ' => ' .. old_value .. ' uuid: ' .. uuid)
end

local function on_custom_event(self, p1, p2, p3)
    print('custom event: ' .. p1, p2, p3)
end

local function test_command_1()
    print('test command 1: ')
end

local function test_command_2(p1, p2, p3)
    print('test command 2: ' .. p1, p2, p3)
end

local function test_command_3(p1, p2, p3)
    print('test command 3: ' .. p1, p2, p3)
end

local function test_command_4(self, p1, p2, p3)
    print('test command 4: ' .. p1, p2, p3)
end

local function test_gurd_true()
    return true
end

local function test_gurd_false()
    return false
end

function init(self)
    self.__model__ = {
        __name__ = 'main',
        __uuid__ = 'main_uuid'
    }
    self.__model__.model = {test1 = 1, test2 = 2}

    Lego.observe.make_observable(self.__model__, 'model')
    
    Lego.event.on('main_model_test1_update', on_test1_update, self)
    Lego.event.on('main_model_test2_update', on_test2_update, self)

    self.__model__.model.test1 = 2
    self.__model__.model.test2 = 3

    -- custorm events
    Lego.event.on('custom_event', on_custom_event, self)     
    Lego.event.emit('custom_event', 1, 2, 3)    

    -- commands
    Lego.command.execute(test_command_1)
    Lego.command.payload('a', 'b', 'c').execute(test_command_2)
    Lego.command.payload('d', 'e', 'f').guard(test_gurd_true).execute(test_command_3)
    Lego.command.payload('g', 'h', 'i').guard(test_gurd_false).execute(test_command_3)

    Lego.command.on('some_event', test_command_4)
    Lego.event.emit('some_event', 1, 2, 3)
end
